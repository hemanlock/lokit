import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/services.dart';
import 'package:flutter_blue/flutter_blue.dart';

const circle_radius = 75.0;
const oriX_L = circle_radius + 25;
const oriY_L = - (circle_radius + 25);
const oriX_R = - (circle_radius + 25);
const oriY_R = - (circle_radius + 25);
bool horizontal=false, vertical=false;
double size_height,size_width;
double distance = 0 ,angle = 0,height = 0;

void main() async{
  await SystemChrome.setPreferredOrientations([DeviceOrientation.landscapeLeft]);   //fixed orientation to landscape
  runApp(new Setup());
}

class Setup extends StatelessWidget{
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Home(),
    );
  }
}

class Home extends StatelessWidget{
  //Setup the interface
  @override
  Widget build(BuildContext context) {
    size_height =MediaQuery.of(context).size.height;
    size_width = MediaQuery.of(context).size.width;
    return new MaterialApp(
      title: 'Flying Fish Controller',
      theme: new ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: new Scaffold(
        appBar: new AppBar(
          title: const Text('Flying Fish Controller'),
        ),
        body: new Row(
          children: <Widget>[
            new Expanded(
              flex: 7, // 70%
              child:HorizontalTouchControl(),
            ),
            new Expanded(
              flex: 3, //30%
              child:VerticalTouchControl(),
            ),
          ],
        ),
      ),
    );
  }
}

class HorizontalTouchControl extends StatefulWidget {
  final double xPos, yPos;
  final ValueChanged<Offset> onChanged;

  const HorizontalTouchControl({Key key, this.onChanged, this.xPos: 0.0, this.yPos: 0.0}) : super(key: key);

  @override
  HorizontalTouchControlState createState() => new HorizontalTouchControlState();
}

class HorizontalTouchControlState extends State<HorizontalTouchControl> {
  double xPos = oriX_L, yPos = oriY_L;
  double originX = oriX_L, originY = oriY_L;

  GlobalKey _painterKey = new GlobalKey();

  bool hitTestSelf(Offset position) => true;

  //When touch
  void _handlePanStart(DragStartDetails details) {
    print("started");
    horizontal=true;
    setState(() {
      xPos = originX = details.globalPosition.dx;
      yPos = originY = details.globalPosition.dy-size_height;
    });
  }
  //When release
  void _handlePanEnd(DragEndDetails details) {
    setState(() {
      xPos = originX = oriX_L;
      yPos = originY = oriY_L;
    });
    horizontal=false;
    print('end');
  }
  //When moving
  void _handlePanUpdate(DragUpdateDetails details) {
    setState(() {
      xPos = details.globalPosition.dx;
      yPos = details.globalPosition.dy-size_height;
    });
  }

  @override
  Widget build(BuildContext context) {
    return new GestureDetector(
      behavior: HitTestBehavior.opaque,
      onPanStart: _handlePanStart,
      onPanEnd: _handlePanEnd,
      onPanUpdate: _handlePanUpdate,
      child:new Container(
        alignment: Alignment(-1.0, 1.0),
        child: new CustomPaint(painter: new HorizontalTouchControlPainter(xPos, yPos, originX, originY),),
      ),
    );
  }
}
//moving horizontal dot
class HorizontalTouchControlPainter extends CustomPainter {
 static const markerRadius = 20.0;
 double xPos,yPos,originX,originY;
 HorizontalTouchControlPainter(this.xPos, this.yPos, this.originX, this.originY);

  @override
  void paint(Canvas canvas, Size size) {
    final paint_dot = new Paint()
      ..color = Colors.blue[400]
      ..style = PaintingStyle.fill;
    final paint_circle = Paint()
      ..color = Colors.green
      ..strokeWidth = 2.0
      ..style = PaintingStyle.stroke;
    final paint_line = Paint()
      ..color = Colors.grey
      ..strokeWidth = 1.0;

    canvas.drawCircle(Offset(this.originX, this.originY), circle_radius, paint_circle);
    canvas.drawLine(Offset(this.originX-circle_radius, this.originY), Offset(this.originX+circle_radius, this.originY), paint_line);
    canvas.drawLine(Offset(this.originX, this.originY-circle_radius), Offset(this.originX, this.originY+circle_radius), paint_line);

    distance = this.cal_dis(this.xPos, this.yPos, this.originX, this.originY);
    angle = this.cal_angle(this.xPos, this.yPos, this.originX, this.originY);

    if(distance>=100) {
      distance=100;
      this.xPos=cos(angle*pi/180)*circle_radius+originX;
      this.yPos=-(sin(angle*pi/180)*circle_radius-originY);
      canvas.drawCircle(new Offset(xPos, yPos), markerRadius, paint_dot);
    }
    else
      canvas.drawCircle(new Offset(xPos, yPos), markerRadius, paint_dot);
    if (horizontal)
      print("Distance=$distance Angle=$angle Height=$height");
    /////////////////////////////
    //send messages to Bluetooth in here
    //////////////////////////

  }

  double cal_dis(double curX, double curY, double originX, double originY){
    double distance = sqrt(pow(curX-originX,2)+pow(curY-originY,2))/(circle_radius)*100;
    return(distance);
  }

  double cal_angle(double curX, double curY, double originX, double originY){
    double angle=0;
    if(curX>originX && curY<originY)
      angle = atan((originY-curY)/(curX-originX)) * 180/pi;
    else if(curX==originX && curY<originY)
      angle = 90;
    else if(curX<originX && curY<originY)
      angle = 180 - atan((originY-curY)/(originX-curX)) * 180/pi;
    else if(curX<originX && curY==originY)
      angle = 180;
    else if(curX<originX && curY>originY)
      angle = 180 + atan((curY-originY)/(originX-curX)) * 180/pi;
    else if(curX==originX && curY>originY)
      angle = 270;
    else if(curX>originX && curY>originY)
      angle = 360 - atan((curY-originY)/(curX-originX)) * 180/pi;
    else if(curX>originX && curY==originY)
      angle = 0;
    return(angle);
  }

  @override
  bool shouldRepaint(HorizontalTouchControlPainter old) => xPos != old.xPos && yPos != old.yPos;
}

class VerticalTouchControl extends StatefulWidget {
  final double xPos, yPos;
  final ValueChanged<Offset> onChanged;

  const VerticalTouchControl({Key key, this.onChanged, this.xPos: 0.0, this.yPos: 0.0}) : super(key: key);

  @override
  VerticalTouchControlState createState() => new VerticalTouchControlState();
}

class VerticalTouchControlState extends State<VerticalTouchControl> {
  double xPos = oriX_R, yPos = oriY_R;
  double originX = oriX_R, originY = oriY_R;

  GlobalKey _painterKey = new GlobalKey();

  bool hitTestSelf(Offset position) => true;

  //When touch
  void _handlePanStart(DragStartDetails details) {
    print("started");
    vertical=true;
    setState(() {
      xPos = originX = details.globalPosition.dx-size_width;
      yPos = originY = details.globalPosition.dy-size_height;
    });
  }
  //When release
  void _handlePanEnd(DragEndDetails details) {
    setState(() {
      xPos = originX = oriX_R;
      yPos = originY = oriY_R;
    });
    vertical=false;
    print('end');
  }
  //When moving
  void _handlePanUpdate(DragUpdateDetails details) {
    setState(() {
      xPos = details.globalPosition.dx-size_width;
      yPos = details.globalPosition.dy-size_height;
    });
  }

  @override
  Widget build(BuildContext context) {
    return new GestureDetector(
      behavior: HitTestBehavior.opaque,
      onPanStart: _handlePanStart,
      onPanEnd: _handlePanEnd,
      onPanUpdate: _handlePanUpdate,
      child:new Container(
        color: Colors.yellow,
        alignment: Alignment(1.0, 1.0),
        child: new CustomPaint(painter: new VerticalTouchControlPainter(xPos, yPos, originX, originY),),
      ),
    );
  }
}

class VerticalTouchControlPainter extends CustomPainter {
  static const markerRadius = 20.0;
  double xPos,yPos,originX,originY;
  VerticalTouchControlPainter(this.xPos, this.yPos, this.originX, this.originY);
  double distance_R,angle_R;
  @override
  void paint(Canvas canvas, Size size) {
    final paint_dot = new Paint()
      ..color = Colors.blue[400]
      ..style = PaintingStyle.fill;
    final paint_circle = Paint()
      ..color = Colors.green
      ..strokeWidth = 2.0
      ..style = PaintingStyle.stroke;
    final paint_line = Paint()
      ..color = Colors.grey
      ..strokeWidth = 1.0;

    canvas.drawCircle(Offset(this.originX, this.originY), circle_radius, paint_circle);
    canvas.drawLine(Offset(this.originX-circle_radius, this.originY), Offset(this.originX+circle_radius, this.originY), paint_line);
    canvas.drawLine(Offset(this.originX, this.originY-circle_radius), Offset(this.originX, this.originY+circle_radius), paint_line);

    height=this.cal_height(this.yPos, this.originY);
    distance_R = this.cal_dis(this.xPos, this.yPos, this.originX, this.originY);
    angle_R = this.cal_angle(this.xPos, this.yPos, this.originX, this.originY);
    if(distance_R>=100) {
      this.xPos=-(cos(angle_R*pi/180)*circle_radius-originX);
      this.yPos=-(sin(angle_R*pi/180)*circle_radius-originY);
      canvas.drawCircle(new Offset(xPos, yPos), markerRadius, paint_dot);
    }
    else
      canvas.drawCircle(new Offset(xPos, yPos), markerRadius, paint_dot);
    if(vertical)
      print("Distance=$distance Angle=$angle Height=$height");
    /////////////////////////////
    //send messages to Bluetooth in here
    //////////////////////////

  }

  double cal_height(double curY, double originY){
    double height;
    if(curY<originY)  //upward
      height=1;
    else if(curY>originY) //downward
      height=-1;
    else
      height=0;
    return height;
  }

  double cal_dis(double curX, double curY, double originX, double originY){
    double distance = sqrt(pow(curX-originX,2)+pow(curY-originY,2))/(circle_radius)*100;
    return(distance);
  }

  double cal_angle(double curX, double curY, double originX, double originY){
    double angle=0;
    if(curX<originX && curY<originY)
      angle = atan((originY-curY)/(originX-curX)) * 180/pi;
    else if(curX==originX && curY<originY)
      angle = 90;
    else if(curX>originX && curY<originY)
      angle = 180 - atan((originY-curY)/(curX-originX)) * 180/pi;
    else if(curX>originX && curY==originY)
      angle = 180;
    else if(curX>originX && curY>originY)
      angle = 180 + atan((curY-originY)/(curX-originX)) * 180/pi;
    else if(curX==originX && curY>originY)
      angle = 270;
    else if(curX<originX && curY>originY)
      angle = 360 - atan((curY-originY)/(originX-curX)) * 180/pi;
    else if(curX<originX && curY==originY)
      angle = 0;
    return(angle);
  }

  @override
  bool shouldRepaint(VerticalTouchControlPainter old) => xPos != old.xPos && yPos != old.yPos;
}
